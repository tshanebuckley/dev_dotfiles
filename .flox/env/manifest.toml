#
# This is a Flox environment manifest.
# Visit flox.dev/docs/concepts/manifest/
# or see flox-edit(1), manifest.toml(5) for more information.
#
# Flox manifest version managed by Flox CLI
version = 1

# List packages you wish to install in your environment inside
# the `[install]` section.
[install]
neovim.pkg-path = "neovim"
git.pkg-path = "git"
bashInteractive.pkg-path = "bashInteractive"
stow.pkg-path = "stow"
coreutils-full.pkg-path = "coreutils-full"
starship.pkg-path = "starship"
nerdfonts.pkg-path = "nerdfonts"
wget.pkg-path = "wget"
unzip.pkg-path = "unzip"
fzf.pkg-path = "fzf"
ripgrep.pkg-path = "ripgrep"
gcc.pkg-path = "gcc"
luarocks.pkg-path = "luarocks"
which.pkg-path = "which"
fd.pkg-path = "fd"
# hello.pkg-path = "hello"
# nodejs = { version = "^20.15.1", pkg-path = "nodejs" }

# Set environment variables in the `[vars]` section. These variables may not
# reference one another, and are added to the environment without first
# expanding them. They are available for use in the `[profile]` and `[hook]`
# scripts.
[vars]
# message = "Howdy"

# The `hook.on-activate` script is run by the *bash* shell immediately upon
# activating an environment, and will not be invoked if Flox detects that the
# environment has previously been activated. Variables set by the script will
# be inherited by `[profile]` scripts defined below. Note that any stdout
# generated by the script will be redirected to stderr.
[hook]
# on-activate = '''
#   # Set variables, create files and directories
#   venv_dir="$(mktemp -d)"
#   export venv_dir
#
#   # Perform initialization steps, e.g. create a python venv
#   python -m venv "$venv_dir"
# '''

# Scripts defined in the `[profile]` section are *sourced* by *your shell* and
# inherit environment variables set in the `[vars]` section and by `[hook]` scripts.
# The `profile.common` script is sourced by all shells and special care should be
# taken to ensure compatibility with all shells, after which exactly one of
# `profile.{bash,fish,tcsh,zsh}` is sourced by the corresponding shell.
[profile]
common = '''
    # symlink our dotfiles
    stow --dir="$PWD" --target="$VENV_HOME" -R nvim -R zellij
    # symlink our flox executable to the venv user space
    FLOX_SYMLINK=/usr/bin/flox
    if [ ! -e "${VENV_HOME}/.local/bin/flox" ]; then
        ln -s "${FLOX_SYMLINK}" "${VENV_HOME}/.local/bin"
    fi
    # pass the venv home value forward to be used in sourcing the .bashrc file
    SCRIPT_DIR="$VENV_HOME"
    source "${VENV_HOME}/.bashrc"
'''
# common = '''
#   echo "it's gettin' flox in here"
# '''

# The `[services]` section of the manifest allows you to define services.
# Services defined here use the packages provided by the `[install]` section
# and any variables you've defined in the `[vars]` section or `hook.on-activate` script.
[services]
# postgres.command = "postgres --config-file=pg.conf"

# Additional options can be set in the `[options]` section. Refer to
# manifest.toml(5) for a list of available options.
[options]
systems = ["aarch64-darwin", "aarch64-linux", "x86_64-darwin", "x86_64-linux"]
# Uncomment to disable CUDA detection.
# cuda-detection = false
